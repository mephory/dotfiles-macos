#!/usr/bin/env python3

import argparse
import os
import sys
import json
import urllib.request
import urllib.error

FOLDER_API_BASE = "http://localhost:41595/api/folder"
IMPORT_ENDPOINT = "http://localhost:41595/api/item/addFromPath"

def parse_args():
    parser = argparse.ArgumentParser(description="Import files into folder with optional tags.")
    parser.add_argument("-f", "--folder", type=str, help="Optional folder name")
    parser.add_argument("-t", "--tags", type=lambda s: s.split(','), help="Optional comma-separated list of tags")
    parser.add_argument("files", nargs="*", help="Files to import")
    return parser.parse_args()

def validate_and_process_files(file_paths):
    valid_files = []
    for path in file_paths:
        if not os.path.isfile(path):
            print(f"Error: File does not exist: {path}", file=sys.stderr)
            sys.exit(1)
        full_path = os.path.abspath(path)
        filename = os.path.basename(path)
        valid_files.append({
            "original": path,
            "full_path": full_path,
            "filename": filename
        })
    return valid_files

def http_json(url, method="GET", data=None):
    headers = {"Content-Type": "application/json"}
    req_data = json.dumps(data).encode("utf-8") if data else None
    req = urllib.request.Request(url, data=req_data, method=method, headers=headers)
    try:
        with urllib.request.urlopen(req) as resp:
            resp_body = resp.read()
            return json.loads(resp_body.decode("utf-8"))
    except urllib.error.HTTPError as e:
        print(f"HTTPError ({e.code}): {e.read().decode()}", file=sys.stderr)
        sys.exit(1)
    except urllib.error.URLError as e:
        print(f"URLError: {e.reason}", file=sys.stderr)
        sys.exit(1)

def resolve_folder_id(folder_name):
    if not folder_name:
        return None

    data = http_json(f"{FOLDER_API_BASE}/list")
    for folder in data.get("data", []):
        if folder.get("name") == folder_name:
            print(f"Using existing folder: {folder_name} (ID: {folder['id']})")
            return folder["id"]

    print(f"Creating new folder: {folder_name}")
    new_folder = http_json(f"{FOLDER_API_BASE}/create", method="POST", data={"folderName": folder_name})
    folder_id = new_folder.get("data", {}).get("id")
    print(f"Created folder ID: {folder_id}")
    return folder_id

def import_file(file_info, folder_id, tags):
    payload = {
        "path": file_info["full_path"],
        "name": file_info["filename"],
        "website": None,
        "tags": tags or [],
        "annotation": None,
        "folderId": folder_id
    }

    http_json(IMPORT_ENDPOINT, method="POST", data=payload)
    print(f"Imported {file_info['filename']} successfully.")

def main():
    args = parse_args()
    validated_files = validate_and_process_files(args.files)
    folder_id = resolve_folder_id(args.folder)

    for file_info in validated_files:
        import_file(file_info, folder_id, args.tags)

if __name__ == "__main__":
    main()
